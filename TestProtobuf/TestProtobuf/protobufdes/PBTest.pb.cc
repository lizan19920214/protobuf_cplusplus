// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBTest.proto

#include "PBTest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Test {
PROTOBUF_CONSTEXPR GMCommand::GMCommand(
    ::_pbi::ConstantInitialized)
  : key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GMCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GMCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GMCommandDefaultTypeInternal() {}
  union {
    GMCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GMCommandDefaultTypeInternal _GMCommand_default_instance_;
PROTOBUF_CONSTEXPR GMCommand_Client2Gate::GMCommand_Client2Gate(
    ::_pbi::ConstantInitialized)
  : command_(nullptr){}
struct GMCommand_Client2GateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GMCommand_Client2GateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GMCommand_Client2GateDefaultTypeInternal() {}
  union {
    GMCommand_Client2Gate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GMCommand_Client2GateDefaultTypeInternal _GMCommand_Client2Gate_default_instance_;
PROTOBUF_CONSTEXPR GMCommand_Gate2Game::GMCommand_Gate2Game(
    ::_pbi::ConstantInitialized)
  : command_(nullptr)
  , iuserid_(uint64_t{0u}){}
struct GMCommand_Gate2GameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GMCommand_Gate2GameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GMCommand_Gate2GameDefaultTypeInternal() {}
  union {
    GMCommand_Gate2Game _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GMCommand_Gate2GameDefaultTypeInternal _GMCommand_Gate2Game_default_instance_;
PROTOBUF_CONSTEXPR GMDeleteAccount_game2DB::GMDeleteAccount_game2DB(
    ::_pbi::ConstantInitialized)
  : iuserid_(uint64_t{0u}){}
struct GMDeleteAccount_game2DBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GMDeleteAccount_game2DBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GMDeleteAccount_game2DBDefaultTypeInternal() {}
  union {
    GMDeleteAccount_game2DB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GMDeleteAccount_game2DBDefaultTypeInternal _GMDeleteAccount_game2DB_default_instance_;
PROTOBUF_CONSTEXPR GMKickPlayer_game2Center::GMKickPlayer_game2Center(
    ::_pbi::ConstantInitialized)
  : iuserid_(uint64_t{0u}){}
struct GMKickPlayer_game2CenterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GMKickPlayer_game2CenterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GMKickPlayer_game2CenterDefaultTypeInternal() {}
  union {
    GMKickPlayer_game2Center _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GMKickPlayer_game2CenterDefaultTypeInternal _GMKickPlayer_game2Center_default_instance_;
}  // namespace Test
static ::_pb::Metadata file_level_metadata_PBTest_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_PBTest_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_PBTest_2eproto = nullptr;

const uint32_t TableStruct_PBTest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Test::GMCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Test::GMCommand, key_),
  PROTOBUF_FIELD_OFFSET(::Test::GMCommand, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Test::GMCommand_Client2Gate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Test::GMCommand_Client2Gate, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Test::GMCommand_Gate2Game, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Test::GMCommand_Gate2Game, command_),
  PROTOBUF_FIELD_OFFSET(::Test::GMCommand_Gate2Game, iuserid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Test::GMDeleteAccount_game2DB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Test::GMDeleteAccount_game2DB, iuserid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Test::GMKickPlayer_game2Center, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Test::GMKickPlayer_game2Center, iuserid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Test::GMCommand)},
  { 8, -1, -1, sizeof(::Test::GMCommand_Client2Gate)},
  { 15, -1, -1, sizeof(::Test::GMCommand_Gate2Game)},
  { 23, -1, -1, sizeof(::Test::GMDeleteAccount_game2DB)},
  { 30, -1, -1, sizeof(::Test::GMKickPlayer_game2Center)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Test::_GMCommand_default_instance_._instance,
  &::Test::_GMCommand_Client2Gate_default_instance_._instance,
  &::Test::_GMCommand_Gate2Game_default_instance_._instance,
  &::Test::_GMDeleteAccount_game2DB_default_instance_._instance,
  &::Test::_GMKickPlayer_game2Center_default_instance_._instance,
};

const char descriptor_table_protodef_PBTest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014PBTest.proto\022\004Test\"\'\n\tGMCommand\022\013\n\003key"
  "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"9\n\025GMCommand_Clien"
  "t2Gate\022 \n\007command\030\001 \001(\0132\017.Test.GMCommand"
  "\"H\n\023GMCommand_Gate2Game\022 \n\007command\030\001 \001(\013"
  "2\017.Test.GMCommand\022\017\n\007iUserId\030\002 \001(\004\"*\n\027GM"
  "DeleteAccount_game2DB\022\017\n\007iUserId\030\001 \001(\004\"+"
  "\n\030GMKickPlayer_game2Center\022\017\n\007iUserId\030\001 "
  "\001(\0042Q\n\016UserServiceRpc\022\?\n\005Login\022\033.Test.GM"
  "Command_Client2Gate\032\031.Test.GMCommand_Gat"
  "e2Gameb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_PBTest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_PBTest_2eproto = {
    false, false, 374, descriptor_table_protodef_PBTest_2eproto,
    "PBTest.proto",
    &descriptor_table_PBTest_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_PBTest_2eproto::offsets,
    file_level_metadata_PBTest_2eproto, file_level_enum_descriptors_PBTest_2eproto,
    file_level_service_descriptors_PBTest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_PBTest_2eproto_getter() {
  return &descriptor_table_PBTest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_PBTest_2eproto(&descriptor_table_PBTest_2eproto);
namespace Test {

// ===================================================================

class GMCommand::_Internal {
 public:
};

GMCommand::GMCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Test.GMCommand)
}
GMCommand::GMCommand(const GMCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Test.GMCommand)
}

inline void GMCommand::SharedCtor() {
key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GMCommand::~GMCommand() {
  // @@protoc_insertion_point(destructor:Test.GMCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GMCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.Destroy();
  value_.Destroy();
}

void GMCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GMCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:Test.GMCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GMCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Test.GMCommand.key"));
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Test.GMCommand.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GMCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Test.GMCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Test.GMCommand.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Test.GMCommand.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Test.GMCommand)
  return target;
}

size_t GMCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Test.GMCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GMCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GMCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GMCommand::GetClassData() const { return &_class_data_; }

void GMCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GMCommand *>(to)->MergeFrom(
      static_cast<const GMCommand &>(from));
}


void GMCommand::MergeFrom(const GMCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Test.GMCommand)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GMCommand::CopyFrom(const GMCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Test.GMCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMCommand::IsInitialized() const {
  return true;
}

void GMCommand::InternalSwap(GMCommand* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GMCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_PBTest_2eproto_getter, &descriptor_table_PBTest_2eproto_once,
      file_level_metadata_PBTest_2eproto[0]);
}

// ===================================================================

class GMCommand_Client2Gate::_Internal {
 public:
  static const ::Test::GMCommand& command(const GMCommand_Client2Gate* msg);
};

const ::Test::GMCommand&
GMCommand_Client2Gate::_Internal::command(const GMCommand_Client2Gate* msg) {
  return *msg->command_;
}
GMCommand_Client2Gate::GMCommand_Client2Gate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Test.GMCommand_Client2Gate)
}
GMCommand_Client2Gate::GMCommand_Client2Gate(const GMCommand_Client2Gate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_command()) {
    command_ = new ::Test::GMCommand(*from.command_);
  } else {
    command_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Test.GMCommand_Client2Gate)
}

inline void GMCommand_Client2Gate::SharedCtor() {
command_ = nullptr;
}

GMCommand_Client2Gate::~GMCommand_Client2Gate() {
  // @@protoc_insertion_point(destructor:Test.GMCommand_Client2Gate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GMCommand_Client2Gate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete command_;
}

void GMCommand_Client2Gate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GMCommand_Client2Gate::Clear() {
// @@protoc_insertion_point(message_clear_start:Test.GMCommand_Client2Gate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && command_ != nullptr) {
    delete command_;
  }
  command_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GMCommand_Client2Gate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Test.GMCommand command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GMCommand_Client2Gate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Test.GMCommand_Client2Gate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Test.GMCommand command = 1;
  if (this->_internal_has_command()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::command(this),
        _Internal::command(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Test.GMCommand_Client2Gate)
  return target;
}

size_t GMCommand_Client2Gate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Test.GMCommand_Client2Gate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Test.GMCommand command = 1;
  if (this->_internal_has_command()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *command_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GMCommand_Client2Gate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GMCommand_Client2Gate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GMCommand_Client2Gate::GetClassData() const { return &_class_data_; }

void GMCommand_Client2Gate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GMCommand_Client2Gate *>(to)->MergeFrom(
      static_cast<const GMCommand_Client2Gate &>(from));
}


void GMCommand_Client2Gate::MergeFrom(const GMCommand_Client2Gate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Test.GMCommand_Client2Gate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_command()) {
    _internal_mutable_command()->::Test::GMCommand::MergeFrom(from._internal_command());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GMCommand_Client2Gate::CopyFrom(const GMCommand_Client2Gate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Test.GMCommand_Client2Gate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMCommand_Client2Gate::IsInitialized() const {
  return true;
}

void GMCommand_Client2Gate::InternalSwap(GMCommand_Client2Gate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(command_, other->command_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GMCommand_Client2Gate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_PBTest_2eproto_getter, &descriptor_table_PBTest_2eproto_once,
      file_level_metadata_PBTest_2eproto[1]);
}

// ===================================================================

class GMCommand_Gate2Game::_Internal {
 public:
  static const ::Test::GMCommand& command(const GMCommand_Gate2Game* msg);
};

const ::Test::GMCommand&
GMCommand_Gate2Game::_Internal::command(const GMCommand_Gate2Game* msg) {
  return *msg->command_;
}
GMCommand_Gate2Game::GMCommand_Gate2Game(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Test.GMCommand_Gate2Game)
}
GMCommand_Gate2Game::GMCommand_Gate2Game(const GMCommand_Gate2Game& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_command()) {
    command_ = new ::Test::GMCommand(*from.command_);
  } else {
    command_ = nullptr;
  }
  iuserid_ = from.iuserid_;
  // @@protoc_insertion_point(copy_constructor:Test.GMCommand_Gate2Game)
}

inline void GMCommand_Gate2Game::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&command_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&iuserid_) -
    reinterpret_cast<char*>(&command_)) + sizeof(iuserid_));
}

GMCommand_Gate2Game::~GMCommand_Gate2Game() {
  // @@protoc_insertion_point(destructor:Test.GMCommand_Gate2Game)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GMCommand_Gate2Game::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete command_;
}

void GMCommand_Gate2Game::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GMCommand_Gate2Game::Clear() {
// @@protoc_insertion_point(message_clear_start:Test.GMCommand_Gate2Game)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && command_ != nullptr) {
    delete command_;
  }
  command_ = nullptr;
  iuserid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GMCommand_Gate2Game::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Test.GMCommand command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 iUserId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          iuserid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GMCommand_Gate2Game::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Test.GMCommand_Gate2Game)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Test.GMCommand command = 1;
  if (this->_internal_has_command()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::command(this),
        _Internal::command(this).GetCachedSize(), target, stream);
  }

  // uint64 iUserId = 2;
  if (this->_internal_iuserid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_iuserid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Test.GMCommand_Gate2Game)
  return target;
}

size_t GMCommand_Gate2Game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Test.GMCommand_Gate2Game)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Test.GMCommand command = 1;
  if (this->_internal_has_command()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *command_);
  }

  // uint64 iUserId = 2;
  if (this->_internal_iuserid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_iuserid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GMCommand_Gate2Game::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GMCommand_Gate2Game::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GMCommand_Gate2Game::GetClassData() const { return &_class_data_; }

void GMCommand_Gate2Game::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GMCommand_Gate2Game *>(to)->MergeFrom(
      static_cast<const GMCommand_Gate2Game &>(from));
}


void GMCommand_Gate2Game::MergeFrom(const GMCommand_Gate2Game& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Test.GMCommand_Gate2Game)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_command()) {
    _internal_mutable_command()->::Test::GMCommand::MergeFrom(from._internal_command());
  }
  if (from._internal_iuserid() != 0) {
    _internal_set_iuserid(from._internal_iuserid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GMCommand_Gate2Game::CopyFrom(const GMCommand_Gate2Game& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Test.GMCommand_Gate2Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMCommand_Gate2Game::IsInitialized() const {
  return true;
}

void GMCommand_Gate2Game::InternalSwap(GMCommand_Gate2Game* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GMCommand_Gate2Game, iuserid_)
      + sizeof(GMCommand_Gate2Game::iuserid_)
      - PROTOBUF_FIELD_OFFSET(GMCommand_Gate2Game, command_)>(
          reinterpret_cast<char*>(&command_),
          reinterpret_cast<char*>(&other->command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GMCommand_Gate2Game::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_PBTest_2eproto_getter, &descriptor_table_PBTest_2eproto_once,
      file_level_metadata_PBTest_2eproto[2]);
}

// ===================================================================

class GMDeleteAccount_game2DB::_Internal {
 public:
};

GMDeleteAccount_game2DB::GMDeleteAccount_game2DB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Test.GMDeleteAccount_game2DB)
}
GMDeleteAccount_game2DB::GMDeleteAccount_game2DB(const GMDeleteAccount_game2DB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  iuserid_ = from.iuserid_;
  // @@protoc_insertion_point(copy_constructor:Test.GMDeleteAccount_game2DB)
}

inline void GMDeleteAccount_game2DB::SharedCtor() {
iuserid_ = uint64_t{0u};
}

GMDeleteAccount_game2DB::~GMDeleteAccount_game2DB() {
  // @@protoc_insertion_point(destructor:Test.GMDeleteAccount_game2DB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GMDeleteAccount_game2DB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GMDeleteAccount_game2DB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GMDeleteAccount_game2DB::Clear() {
// @@protoc_insertion_point(message_clear_start:Test.GMDeleteAccount_game2DB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  iuserid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GMDeleteAccount_game2DB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 iUserId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          iuserid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GMDeleteAccount_game2DB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Test.GMDeleteAccount_game2DB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 iUserId = 1;
  if (this->_internal_iuserid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_iuserid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Test.GMDeleteAccount_game2DB)
  return target;
}

size_t GMDeleteAccount_game2DB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Test.GMDeleteAccount_game2DB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 iUserId = 1;
  if (this->_internal_iuserid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_iuserid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GMDeleteAccount_game2DB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GMDeleteAccount_game2DB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GMDeleteAccount_game2DB::GetClassData() const { return &_class_data_; }

void GMDeleteAccount_game2DB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GMDeleteAccount_game2DB *>(to)->MergeFrom(
      static_cast<const GMDeleteAccount_game2DB &>(from));
}


void GMDeleteAccount_game2DB::MergeFrom(const GMDeleteAccount_game2DB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Test.GMDeleteAccount_game2DB)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_iuserid() != 0) {
    _internal_set_iuserid(from._internal_iuserid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GMDeleteAccount_game2DB::CopyFrom(const GMDeleteAccount_game2DB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Test.GMDeleteAccount_game2DB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMDeleteAccount_game2DB::IsInitialized() const {
  return true;
}

void GMDeleteAccount_game2DB::InternalSwap(GMDeleteAccount_game2DB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(iuserid_, other->iuserid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GMDeleteAccount_game2DB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_PBTest_2eproto_getter, &descriptor_table_PBTest_2eproto_once,
      file_level_metadata_PBTest_2eproto[3]);
}

// ===================================================================

class GMKickPlayer_game2Center::_Internal {
 public:
};

GMKickPlayer_game2Center::GMKickPlayer_game2Center(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Test.GMKickPlayer_game2Center)
}
GMKickPlayer_game2Center::GMKickPlayer_game2Center(const GMKickPlayer_game2Center& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  iuserid_ = from.iuserid_;
  // @@protoc_insertion_point(copy_constructor:Test.GMKickPlayer_game2Center)
}

inline void GMKickPlayer_game2Center::SharedCtor() {
iuserid_ = uint64_t{0u};
}

GMKickPlayer_game2Center::~GMKickPlayer_game2Center() {
  // @@protoc_insertion_point(destructor:Test.GMKickPlayer_game2Center)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GMKickPlayer_game2Center::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GMKickPlayer_game2Center::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GMKickPlayer_game2Center::Clear() {
// @@protoc_insertion_point(message_clear_start:Test.GMKickPlayer_game2Center)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  iuserid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GMKickPlayer_game2Center::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 iUserId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          iuserid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GMKickPlayer_game2Center::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Test.GMKickPlayer_game2Center)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 iUserId = 1;
  if (this->_internal_iuserid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_iuserid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Test.GMKickPlayer_game2Center)
  return target;
}

size_t GMKickPlayer_game2Center::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Test.GMKickPlayer_game2Center)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 iUserId = 1;
  if (this->_internal_iuserid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_iuserid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GMKickPlayer_game2Center::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GMKickPlayer_game2Center::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GMKickPlayer_game2Center::GetClassData() const { return &_class_data_; }

void GMKickPlayer_game2Center::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GMKickPlayer_game2Center *>(to)->MergeFrom(
      static_cast<const GMKickPlayer_game2Center &>(from));
}


void GMKickPlayer_game2Center::MergeFrom(const GMKickPlayer_game2Center& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Test.GMKickPlayer_game2Center)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_iuserid() != 0) {
    _internal_set_iuserid(from._internal_iuserid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GMKickPlayer_game2Center::CopyFrom(const GMKickPlayer_game2Center& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Test.GMKickPlayer_game2Center)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMKickPlayer_game2Center::IsInitialized() const {
  return true;
}

void GMKickPlayer_game2Center::InternalSwap(GMKickPlayer_game2Center* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(iuserid_, other->iuserid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GMKickPlayer_game2Center::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_PBTest_2eproto_getter, &descriptor_table_PBTest_2eproto_once,
      file_level_metadata_PBTest_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Test
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Test::GMCommand*
Arena::CreateMaybeMessage< ::Test::GMCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Test::GMCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::Test::GMCommand_Client2Gate*
Arena::CreateMaybeMessage< ::Test::GMCommand_Client2Gate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Test::GMCommand_Client2Gate >(arena);
}
template<> PROTOBUF_NOINLINE ::Test::GMCommand_Gate2Game*
Arena::CreateMaybeMessage< ::Test::GMCommand_Gate2Game >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Test::GMCommand_Gate2Game >(arena);
}
template<> PROTOBUF_NOINLINE ::Test::GMDeleteAccount_game2DB*
Arena::CreateMaybeMessage< ::Test::GMDeleteAccount_game2DB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Test::GMDeleteAccount_game2DB >(arena);
}
template<> PROTOBUF_NOINLINE ::Test::GMKickPlayer_game2Center*
Arena::CreateMaybeMessage< ::Test::GMKickPlayer_game2Center >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Test::GMKickPlayer_game2Center >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
