// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBTest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PBTest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PBTest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PBTest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PBTest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PBTest_2eproto;
namespace Test {
class GMCommand;
struct GMCommandDefaultTypeInternal;
extern GMCommandDefaultTypeInternal _GMCommand_default_instance_;
class GMCommand_Client2Gate;
struct GMCommand_Client2GateDefaultTypeInternal;
extern GMCommand_Client2GateDefaultTypeInternal _GMCommand_Client2Gate_default_instance_;
class GMCommand_Gate2Game;
struct GMCommand_Gate2GameDefaultTypeInternal;
extern GMCommand_Gate2GameDefaultTypeInternal _GMCommand_Gate2Game_default_instance_;
class GMDeleteAccount_game2DB;
struct GMDeleteAccount_game2DBDefaultTypeInternal;
extern GMDeleteAccount_game2DBDefaultTypeInternal _GMDeleteAccount_game2DB_default_instance_;
class GMKickPlayer_game2Center;
struct GMKickPlayer_game2CenterDefaultTypeInternal;
extern GMKickPlayer_game2CenterDefaultTypeInternal _GMKickPlayer_game2Center_default_instance_;
}  // namespace Test
PROTOBUF_NAMESPACE_OPEN
template<> ::Test::GMCommand* Arena::CreateMaybeMessage<::Test::GMCommand>(Arena*);
template<> ::Test::GMCommand_Client2Gate* Arena::CreateMaybeMessage<::Test::GMCommand_Client2Gate>(Arena*);
template<> ::Test::GMCommand_Gate2Game* Arena::CreateMaybeMessage<::Test::GMCommand_Gate2Game>(Arena*);
template<> ::Test::GMDeleteAccount_game2DB* Arena::CreateMaybeMessage<::Test::GMDeleteAccount_game2DB>(Arena*);
template<> ::Test::GMKickPlayer_game2Center* Arena::CreateMaybeMessage<::Test::GMKickPlayer_game2Center>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Test {

// ===================================================================

class GMCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Test.GMCommand) */ {
 public:
  inline GMCommand() : GMCommand(nullptr) {}
  ~GMCommand() override;
  explicit PROTOBUF_CONSTEXPR GMCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GMCommand(const GMCommand& from);
  GMCommand(GMCommand&& from) noexcept
    : GMCommand() {
    *this = ::std::move(from);
  }

  inline GMCommand& operator=(const GMCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GMCommand& operator=(GMCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GMCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const GMCommand* internal_default_instance() {
    return reinterpret_cast<const GMCommand*>(
               &_GMCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GMCommand& a, GMCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GMCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GMCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GMCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GMCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GMCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GMCommand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GMCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Test.GMCommand";
  }
  protected:
  explicit GMCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:Test.GMCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBTest_2eproto;
};
// -------------------------------------------------------------------

class GMCommand_Client2Gate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Test.GMCommand_Client2Gate) */ {
 public:
  inline GMCommand_Client2Gate() : GMCommand_Client2Gate(nullptr) {}
  ~GMCommand_Client2Gate() override;
  explicit PROTOBUF_CONSTEXPR GMCommand_Client2Gate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GMCommand_Client2Gate(const GMCommand_Client2Gate& from);
  GMCommand_Client2Gate(GMCommand_Client2Gate&& from) noexcept
    : GMCommand_Client2Gate() {
    *this = ::std::move(from);
  }

  inline GMCommand_Client2Gate& operator=(const GMCommand_Client2Gate& from) {
    CopyFrom(from);
    return *this;
  }
  inline GMCommand_Client2Gate& operator=(GMCommand_Client2Gate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GMCommand_Client2Gate& default_instance() {
    return *internal_default_instance();
  }
  static inline const GMCommand_Client2Gate* internal_default_instance() {
    return reinterpret_cast<const GMCommand_Client2Gate*>(
               &_GMCommand_Client2Gate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GMCommand_Client2Gate& a, GMCommand_Client2Gate& b) {
    a.Swap(&b);
  }
  inline void Swap(GMCommand_Client2Gate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GMCommand_Client2Gate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GMCommand_Client2Gate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GMCommand_Client2Gate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GMCommand_Client2Gate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GMCommand_Client2Gate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GMCommand_Client2Gate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Test.GMCommand_Client2Gate";
  }
  protected:
  explicit GMCommand_Client2Gate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // .Test.GMCommand command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const ::Test::GMCommand& command() const;
  PROTOBUF_NODISCARD ::Test::GMCommand* release_command();
  ::Test::GMCommand* mutable_command();
  void set_allocated_command(::Test::GMCommand* command);
  private:
  const ::Test::GMCommand& _internal_command() const;
  ::Test::GMCommand* _internal_mutable_command();
  public:
  void unsafe_arena_set_allocated_command(
      ::Test::GMCommand* command);
  ::Test::GMCommand* unsafe_arena_release_command();

  // @@protoc_insertion_point(class_scope:Test.GMCommand_Client2Gate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Test::GMCommand* command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBTest_2eproto;
};
// -------------------------------------------------------------------

class GMCommand_Gate2Game final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Test.GMCommand_Gate2Game) */ {
 public:
  inline GMCommand_Gate2Game() : GMCommand_Gate2Game(nullptr) {}
  ~GMCommand_Gate2Game() override;
  explicit PROTOBUF_CONSTEXPR GMCommand_Gate2Game(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GMCommand_Gate2Game(const GMCommand_Gate2Game& from);
  GMCommand_Gate2Game(GMCommand_Gate2Game&& from) noexcept
    : GMCommand_Gate2Game() {
    *this = ::std::move(from);
  }

  inline GMCommand_Gate2Game& operator=(const GMCommand_Gate2Game& from) {
    CopyFrom(from);
    return *this;
  }
  inline GMCommand_Gate2Game& operator=(GMCommand_Gate2Game&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GMCommand_Gate2Game& default_instance() {
    return *internal_default_instance();
  }
  static inline const GMCommand_Gate2Game* internal_default_instance() {
    return reinterpret_cast<const GMCommand_Gate2Game*>(
               &_GMCommand_Gate2Game_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GMCommand_Gate2Game& a, GMCommand_Gate2Game& b) {
    a.Swap(&b);
  }
  inline void Swap(GMCommand_Gate2Game* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GMCommand_Gate2Game* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GMCommand_Gate2Game* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GMCommand_Gate2Game>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GMCommand_Gate2Game& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GMCommand_Gate2Game& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GMCommand_Gate2Game* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Test.GMCommand_Gate2Game";
  }
  protected:
  explicit GMCommand_Gate2Game(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kIUserIdFieldNumber = 2,
  };
  // .Test.GMCommand command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const ::Test::GMCommand& command() const;
  PROTOBUF_NODISCARD ::Test::GMCommand* release_command();
  ::Test::GMCommand* mutable_command();
  void set_allocated_command(::Test::GMCommand* command);
  private:
  const ::Test::GMCommand& _internal_command() const;
  ::Test::GMCommand* _internal_mutable_command();
  public:
  void unsafe_arena_set_allocated_command(
      ::Test::GMCommand* command);
  ::Test::GMCommand* unsafe_arena_release_command();

  // uint64 iUserId = 2;
  void clear_iuserid();
  uint64_t iuserid() const;
  void set_iuserid(uint64_t value);
  private:
  uint64_t _internal_iuserid() const;
  void _internal_set_iuserid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Test.GMCommand_Gate2Game)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Test::GMCommand* command_;
  uint64_t iuserid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBTest_2eproto;
};
// -------------------------------------------------------------------

class GMDeleteAccount_game2DB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Test.GMDeleteAccount_game2DB) */ {
 public:
  inline GMDeleteAccount_game2DB() : GMDeleteAccount_game2DB(nullptr) {}
  ~GMDeleteAccount_game2DB() override;
  explicit PROTOBUF_CONSTEXPR GMDeleteAccount_game2DB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GMDeleteAccount_game2DB(const GMDeleteAccount_game2DB& from);
  GMDeleteAccount_game2DB(GMDeleteAccount_game2DB&& from) noexcept
    : GMDeleteAccount_game2DB() {
    *this = ::std::move(from);
  }

  inline GMDeleteAccount_game2DB& operator=(const GMDeleteAccount_game2DB& from) {
    CopyFrom(from);
    return *this;
  }
  inline GMDeleteAccount_game2DB& operator=(GMDeleteAccount_game2DB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GMDeleteAccount_game2DB& default_instance() {
    return *internal_default_instance();
  }
  static inline const GMDeleteAccount_game2DB* internal_default_instance() {
    return reinterpret_cast<const GMDeleteAccount_game2DB*>(
               &_GMDeleteAccount_game2DB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GMDeleteAccount_game2DB& a, GMDeleteAccount_game2DB& b) {
    a.Swap(&b);
  }
  inline void Swap(GMDeleteAccount_game2DB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GMDeleteAccount_game2DB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GMDeleteAccount_game2DB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GMDeleteAccount_game2DB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GMDeleteAccount_game2DB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GMDeleteAccount_game2DB& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GMDeleteAccount_game2DB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Test.GMDeleteAccount_game2DB";
  }
  protected:
  explicit GMDeleteAccount_game2DB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIUserIdFieldNumber = 1,
  };
  // uint64 iUserId = 1;
  void clear_iuserid();
  uint64_t iuserid() const;
  void set_iuserid(uint64_t value);
  private:
  uint64_t _internal_iuserid() const;
  void _internal_set_iuserid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Test.GMDeleteAccount_game2DB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t iuserid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBTest_2eproto;
};
// -------------------------------------------------------------------

class GMKickPlayer_game2Center final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Test.GMKickPlayer_game2Center) */ {
 public:
  inline GMKickPlayer_game2Center() : GMKickPlayer_game2Center(nullptr) {}
  ~GMKickPlayer_game2Center() override;
  explicit PROTOBUF_CONSTEXPR GMKickPlayer_game2Center(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GMKickPlayer_game2Center(const GMKickPlayer_game2Center& from);
  GMKickPlayer_game2Center(GMKickPlayer_game2Center&& from) noexcept
    : GMKickPlayer_game2Center() {
    *this = ::std::move(from);
  }

  inline GMKickPlayer_game2Center& operator=(const GMKickPlayer_game2Center& from) {
    CopyFrom(from);
    return *this;
  }
  inline GMKickPlayer_game2Center& operator=(GMKickPlayer_game2Center&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GMKickPlayer_game2Center& default_instance() {
    return *internal_default_instance();
  }
  static inline const GMKickPlayer_game2Center* internal_default_instance() {
    return reinterpret_cast<const GMKickPlayer_game2Center*>(
               &_GMKickPlayer_game2Center_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GMKickPlayer_game2Center& a, GMKickPlayer_game2Center& b) {
    a.Swap(&b);
  }
  inline void Swap(GMKickPlayer_game2Center* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GMKickPlayer_game2Center* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GMKickPlayer_game2Center* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GMKickPlayer_game2Center>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GMKickPlayer_game2Center& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GMKickPlayer_game2Center& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GMKickPlayer_game2Center* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Test.GMKickPlayer_game2Center";
  }
  protected:
  explicit GMKickPlayer_game2Center(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIUserIdFieldNumber = 1,
  };
  // uint64 iUserId = 1;
  void clear_iuserid();
  uint64_t iuserid() const;
  void set_iuserid(uint64_t value);
  private:
  uint64_t _internal_iuserid() const;
  void _internal_set_iuserid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Test.GMKickPlayer_game2Center)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t iuserid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBTest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GMCommand

// string key = 1;
inline void GMCommand::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& GMCommand::key() const {
  // @@protoc_insertion_point(field_get:Test.GMCommand.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GMCommand::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Test.GMCommand.key)
}
inline std::string* GMCommand::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:Test.GMCommand.key)
  return _s;
}
inline const std::string& GMCommand::_internal_key() const {
  return key_.Get();
}
inline void GMCommand::_internal_set_key(const std::string& value) {
  
  key_.Set(value, GetArenaForAllocation());
}
inline std::string* GMCommand::_internal_mutable_key() {
  
  return key_.Mutable(GetArenaForAllocation());
}
inline std::string* GMCommand::release_key() {
  // @@protoc_insertion_point(field_release:Test.GMCommand.key)
  return key_.Release();
}
inline void GMCommand::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Test.GMCommand.key)
}

// string value = 2;
inline void GMCommand::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& GMCommand::value() const {
  // @@protoc_insertion_point(field_get:Test.GMCommand.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GMCommand::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Test.GMCommand.value)
}
inline std::string* GMCommand::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:Test.GMCommand.value)
  return _s;
}
inline const std::string& GMCommand::_internal_value() const {
  return value_.Get();
}
inline void GMCommand::_internal_set_value(const std::string& value) {
  
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* GMCommand::_internal_mutable_value() {
  
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* GMCommand::release_value() {
  // @@protoc_insertion_point(field_release:Test.GMCommand.value)
  return value_.Release();
}
inline void GMCommand::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Test.GMCommand.value)
}

// -------------------------------------------------------------------

// GMCommand_Client2Gate

// .Test.GMCommand command = 1;
inline bool GMCommand_Client2Gate::_internal_has_command() const {
  return this != internal_default_instance() && command_ != nullptr;
}
inline bool GMCommand_Client2Gate::has_command() const {
  return _internal_has_command();
}
inline void GMCommand_Client2Gate::clear_command() {
  if (GetArenaForAllocation() == nullptr && command_ != nullptr) {
    delete command_;
  }
  command_ = nullptr;
}
inline const ::Test::GMCommand& GMCommand_Client2Gate::_internal_command() const {
  const ::Test::GMCommand* p = command_;
  return p != nullptr ? *p : reinterpret_cast<const ::Test::GMCommand&>(
      ::Test::_GMCommand_default_instance_);
}
inline const ::Test::GMCommand& GMCommand_Client2Gate::command() const {
  // @@protoc_insertion_point(field_get:Test.GMCommand_Client2Gate.command)
  return _internal_command();
}
inline void GMCommand_Client2Gate::unsafe_arena_set_allocated_command(
    ::Test::GMCommand* command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_);
  }
  command_ = command;
  if (command) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Test.GMCommand_Client2Gate.command)
}
inline ::Test::GMCommand* GMCommand_Client2Gate::release_command() {
  
  ::Test::GMCommand* temp = command_;
  command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Test::GMCommand* GMCommand_Client2Gate::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_release:Test.GMCommand_Client2Gate.command)
  
  ::Test::GMCommand* temp = command_;
  command_ = nullptr;
  return temp;
}
inline ::Test::GMCommand* GMCommand_Client2Gate::_internal_mutable_command() {
  
  if (command_ == nullptr) {
    auto* p = CreateMaybeMessage<::Test::GMCommand>(GetArenaForAllocation());
    command_ = p;
  }
  return command_;
}
inline ::Test::GMCommand* GMCommand_Client2Gate::mutable_command() {
  ::Test::GMCommand* _msg = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:Test.GMCommand_Client2Gate.command)
  return _msg;
}
inline void GMCommand_Client2Gate::set_allocated_command(::Test::GMCommand* command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete command_;
  }
  if (command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(command);
    if (message_arena != submessage_arena) {
      command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    
  } else {
    
  }
  command_ = command;
  // @@protoc_insertion_point(field_set_allocated:Test.GMCommand_Client2Gate.command)
}

// -------------------------------------------------------------------

// GMCommand_Gate2Game

// .Test.GMCommand command = 1;
inline bool GMCommand_Gate2Game::_internal_has_command() const {
  return this != internal_default_instance() && command_ != nullptr;
}
inline bool GMCommand_Gate2Game::has_command() const {
  return _internal_has_command();
}
inline void GMCommand_Gate2Game::clear_command() {
  if (GetArenaForAllocation() == nullptr && command_ != nullptr) {
    delete command_;
  }
  command_ = nullptr;
}
inline const ::Test::GMCommand& GMCommand_Gate2Game::_internal_command() const {
  const ::Test::GMCommand* p = command_;
  return p != nullptr ? *p : reinterpret_cast<const ::Test::GMCommand&>(
      ::Test::_GMCommand_default_instance_);
}
inline const ::Test::GMCommand& GMCommand_Gate2Game::command() const {
  // @@protoc_insertion_point(field_get:Test.GMCommand_Gate2Game.command)
  return _internal_command();
}
inline void GMCommand_Gate2Game::unsafe_arena_set_allocated_command(
    ::Test::GMCommand* command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_);
  }
  command_ = command;
  if (command) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Test.GMCommand_Gate2Game.command)
}
inline ::Test::GMCommand* GMCommand_Gate2Game::release_command() {
  
  ::Test::GMCommand* temp = command_;
  command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Test::GMCommand* GMCommand_Gate2Game::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_release:Test.GMCommand_Gate2Game.command)
  
  ::Test::GMCommand* temp = command_;
  command_ = nullptr;
  return temp;
}
inline ::Test::GMCommand* GMCommand_Gate2Game::_internal_mutable_command() {
  
  if (command_ == nullptr) {
    auto* p = CreateMaybeMessage<::Test::GMCommand>(GetArenaForAllocation());
    command_ = p;
  }
  return command_;
}
inline ::Test::GMCommand* GMCommand_Gate2Game::mutable_command() {
  ::Test::GMCommand* _msg = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:Test.GMCommand_Gate2Game.command)
  return _msg;
}
inline void GMCommand_Gate2Game::set_allocated_command(::Test::GMCommand* command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete command_;
  }
  if (command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(command);
    if (message_arena != submessage_arena) {
      command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    
  } else {
    
  }
  command_ = command;
  // @@protoc_insertion_point(field_set_allocated:Test.GMCommand_Gate2Game.command)
}

// uint64 iUserId = 2;
inline void GMCommand_Gate2Game::clear_iuserid() {
  iuserid_ = uint64_t{0u};
}
inline uint64_t GMCommand_Gate2Game::_internal_iuserid() const {
  return iuserid_;
}
inline uint64_t GMCommand_Gate2Game::iuserid() const {
  // @@protoc_insertion_point(field_get:Test.GMCommand_Gate2Game.iUserId)
  return _internal_iuserid();
}
inline void GMCommand_Gate2Game::_internal_set_iuserid(uint64_t value) {
  
  iuserid_ = value;
}
inline void GMCommand_Gate2Game::set_iuserid(uint64_t value) {
  _internal_set_iuserid(value);
  // @@protoc_insertion_point(field_set:Test.GMCommand_Gate2Game.iUserId)
}

// -------------------------------------------------------------------

// GMDeleteAccount_game2DB

// uint64 iUserId = 1;
inline void GMDeleteAccount_game2DB::clear_iuserid() {
  iuserid_ = uint64_t{0u};
}
inline uint64_t GMDeleteAccount_game2DB::_internal_iuserid() const {
  return iuserid_;
}
inline uint64_t GMDeleteAccount_game2DB::iuserid() const {
  // @@protoc_insertion_point(field_get:Test.GMDeleteAccount_game2DB.iUserId)
  return _internal_iuserid();
}
inline void GMDeleteAccount_game2DB::_internal_set_iuserid(uint64_t value) {
  
  iuserid_ = value;
}
inline void GMDeleteAccount_game2DB::set_iuserid(uint64_t value) {
  _internal_set_iuserid(value);
  // @@protoc_insertion_point(field_set:Test.GMDeleteAccount_game2DB.iUserId)
}

// -------------------------------------------------------------------

// GMKickPlayer_game2Center

// uint64 iUserId = 1;
inline void GMKickPlayer_game2Center::clear_iuserid() {
  iuserid_ = uint64_t{0u};
}
inline uint64_t GMKickPlayer_game2Center::_internal_iuserid() const {
  return iuserid_;
}
inline uint64_t GMKickPlayer_game2Center::iuserid() const {
  // @@protoc_insertion_point(field_get:Test.GMKickPlayer_game2Center.iUserId)
  return _internal_iuserid();
}
inline void GMKickPlayer_game2Center::_internal_set_iuserid(uint64_t value) {
  
  iuserid_ = value;
}
inline void GMKickPlayer_game2Center::set_iuserid(uint64_t value) {
  _internal_set_iuserid(value);
  // @@protoc_insertion_point(field_set:Test.GMKickPlayer_game2Center.iUserId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PBTest_2eproto
