// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBAccount.proto

#include "PBAccount.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Account {
PROTOBUF_CONSTEXPR SynServerLog_Game2Gate::SynServerLog_Game2Gate(
    ::_pbi::ConstantInitialized)
  : slog_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , uid_(uint64_t{0u})
  , uparam_(uint64_t{0u}){}
struct SynServerLog_Game2GateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SynServerLog_Game2GateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SynServerLog_Game2GateDefaultTypeInternal() {}
  union {
    SynServerLog_Game2Gate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SynServerLog_Game2GateDefaultTypeInternal _SynServerLog_Game2Gate_default_instance_;
PROTOBUF_CONSTEXPR TestMessage::TestMessage(
    ::_pbi::ConstantInitialized)
  : testid_(0u){}
struct TestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMessageDefaultTypeInternal() {}
  union {
    TestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMessageDefaultTypeInternal _TestMessage_default_instance_;
}  // namespace Account
static ::_pb::Metadata file_level_metadata_PBAccount_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_PBAccount_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_PBAccount_2eproto = nullptr;

const uint32_t TableStruct_PBAccount_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Account::SynServerLog_Game2Gate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Account::SynServerLog_Game2Gate, uid_),
  PROTOBUF_FIELD_OFFSET(::Account::SynServerLog_Game2Gate, uparam_),
  PROTOBUF_FIELD_OFFSET(::Account::SynServerLog_Game2Gate, slog_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Account::TestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Account::TestMessage, testid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Account::SynServerLog_Game2Gate)},
  { 9, -1, -1, sizeof(::Account::TestMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Account::_SynServerLog_Game2Gate_default_instance_._instance,
  &::Account::_TestMessage_default_instance_._instance,
};

const char descriptor_table_protodef_PBAccount_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017PBAccount.proto\022\007Account\"C\n\026SynServerL"
  "og_Game2Gate\022\013\n\003uid\030\001 \001(\004\022\016\n\006uParam\030\002 \001("
  "\004\022\014\n\004sLog\030\003 \001(\014\"\035\n\013TestMessage\022\016\n\006testid"
  "\030\001 \001(\rb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_PBAccount_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_PBAccount_2eproto = {
    false, false, 134, descriptor_table_protodef_PBAccount_2eproto,
    "PBAccount.proto",
    &descriptor_table_PBAccount_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_PBAccount_2eproto::offsets,
    file_level_metadata_PBAccount_2eproto, file_level_enum_descriptors_PBAccount_2eproto,
    file_level_service_descriptors_PBAccount_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_PBAccount_2eproto_getter() {
  return &descriptor_table_PBAccount_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_PBAccount_2eproto(&descriptor_table_PBAccount_2eproto);
namespace Account {

// ===================================================================

class SynServerLog_Game2Gate::_Internal {
 public:
};

SynServerLog_Game2Gate::SynServerLog_Game2Gate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Account.SynServerLog_Game2Gate)
}
SynServerLog_Game2Gate::SynServerLog_Game2Gate(const SynServerLog_Game2Gate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  slog_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    slog_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slog().empty()) {
    slog_.Set(from._internal_slog(), 
      GetArenaForAllocation());
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uparam_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(uparam_));
  // @@protoc_insertion_point(copy_constructor:Account.SynServerLog_Game2Gate)
}

inline void SynServerLog_Game2Gate::SharedCtor() {
slog_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  slog_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uparam_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(uparam_));
}

SynServerLog_Game2Gate::~SynServerLog_Game2Gate() {
  // @@protoc_insertion_point(destructor:Account.SynServerLog_Game2Gate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SynServerLog_Game2Gate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  slog_.Destroy();
}

void SynServerLog_Game2Gate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SynServerLog_Game2Gate::Clear() {
// @@protoc_insertion_point(message_clear_start:Account.SynServerLog_Game2Gate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slog_.ClearToEmpty();
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uparam_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(uparam_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SynServerLog_Game2Gate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 uParam = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uparam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sLog = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_slog();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SynServerLog_Game2Gate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Account.SynServerLog_Game2Gate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 uid = 1;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_uid(), target);
  }

  // uint64 uParam = 2;
  if (this->_internal_uparam() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_uparam(), target);
  }

  // bytes sLog = 3;
  if (!this->_internal_slog().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_slog(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Account.SynServerLog_Game2Gate)
  return target;
}

size_t SynServerLog_Game2Gate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Account.SynServerLog_Game2Gate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sLog = 3;
  if (!this->_internal_slog().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_slog());
  }

  // uint64 uid = 1;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_uid());
  }

  // uint64 uParam = 2;
  if (this->_internal_uparam() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_uparam());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SynServerLog_Game2Gate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SynServerLog_Game2Gate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SynServerLog_Game2Gate::GetClassData() const { return &_class_data_; }

void SynServerLog_Game2Gate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SynServerLog_Game2Gate *>(to)->MergeFrom(
      static_cast<const SynServerLog_Game2Gate &>(from));
}


void SynServerLog_Game2Gate::MergeFrom(const SynServerLog_Game2Gate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Account.SynServerLog_Game2Gate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_slog().empty()) {
    _internal_set_slog(from._internal_slog());
  }
  if (from._internal_uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from._internal_uparam() != 0) {
    _internal_set_uparam(from._internal_uparam());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SynServerLog_Game2Gate::CopyFrom(const SynServerLog_Game2Gate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Account.SynServerLog_Game2Gate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynServerLog_Game2Gate::IsInitialized() const {
  return true;
}

void SynServerLog_Game2Gate::InternalSwap(SynServerLog_Game2Gate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &slog_, lhs_arena,
      &other->slog_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SynServerLog_Game2Gate, uparam_)
      + sizeof(SynServerLog_Game2Gate::uparam_)
      - PROTOBUF_FIELD_OFFSET(SynServerLog_Game2Gate, uid_)>(
          reinterpret_cast<char*>(&uid_),
          reinterpret_cast<char*>(&other->uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SynServerLog_Game2Gate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_PBAccount_2eproto_getter, &descriptor_table_PBAccount_2eproto_once,
      file_level_metadata_PBAccount_2eproto[0]);
}

// ===================================================================

class TestMessage::_Internal {
 public:
};

TestMessage::TestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Account.TestMessage)
}
TestMessage::TestMessage(const TestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  testid_ = from.testid_;
  // @@protoc_insertion_point(copy_constructor:Account.TestMessage)
}

inline void TestMessage::SharedCtor() {
testid_ = 0u;
}

TestMessage::~TestMessage() {
  // @@protoc_insertion_point(destructor:Account.TestMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Account.TestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  testid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 testid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          testid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Account.TestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 testid = 1;
  if (this->_internal_testid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_testid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Account.TestMessage)
  return target;
}

size_t TestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Account.TestMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 testid = 1;
  if (this->_internal_testid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_testid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMessage::GetClassData() const { return &_class_data_; }

void TestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestMessage *>(to)->MergeFrom(
      static_cast<const TestMessage &>(from));
}


void TestMessage::MergeFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Account.TestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_testid() != 0) {
    _internal_set_testid(from._internal_testid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMessage::CopyFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Account.TestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage::IsInitialized() const {
  return true;
}

void TestMessage::InternalSwap(TestMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(testid_, other->testid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_PBAccount_2eproto_getter, &descriptor_table_PBAccount_2eproto_once,
      file_level_metadata_PBAccount_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Account
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Account::SynServerLog_Game2Gate*
Arena::CreateMaybeMessage< ::Account::SynServerLog_Game2Gate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Account::SynServerLog_Game2Gate >(arena);
}
template<> PROTOBUF_NOINLINE ::Account::TestMessage*
Arena::CreateMaybeMessage< ::Account::TestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Account::TestMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
