// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBAccount.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PBAccount_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PBAccount_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PBAccount_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PBAccount_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PBAccount_2eproto;
namespace Account {
class SynServerLog_Game2Gate;
struct SynServerLog_Game2GateDefaultTypeInternal;
extern SynServerLog_Game2GateDefaultTypeInternal _SynServerLog_Game2Gate_default_instance_;
class TestMessage;
struct TestMessageDefaultTypeInternal;
extern TestMessageDefaultTypeInternal _TestMessage_default_instance_;
}  // namespace Account
PROTOBUF_NAMESPACE_OPEN
template<> ::Account::SynServerLog_Game2Gate* Arena::CreateMaybeMessage<::Account::SynServerLog_Game2Gate>(Arena*);
template<> ::Account::TestMessage* Arena::CreateMaybeMessage<::Account::TestMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Account {

// ===================================================================

class SynServerLog_Game2Gate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Account.SynServerLog_Game2Gate) */ {
 public:
  inline SynServerLog_Game2Gate() : SynServerLog_Game2Gate(nullptr) {}
  ~SynServerLog_Game2Gate() override;
  explicit PROTOBUF_CONSTEXPR SynServerLog_Game2Gate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SynServerLog_Game2Gate(const SynServerLog_Game2Gate& from);
  SynServerLog_Game2Gate(SynServerLog_Game2Gate&& from) noexcept
    : SynServerLog_Game2Gate() {
    *this = ::std::move(from);
  }

  inline SynServerLog_Game2Gate& operator=(const SynServerLog_Game2Gate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SynServerLog_Game2Gate& operator=(SynServerLog_Game2Gate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SynServerLog_Game2Gate& default_instance() {
    return *internal_default_instance();
  }
  static inline const SynServerLog_Game2Gate* internal_default_instance() {
    return reinterpret_cast<const SynServerLog_Game2Gate*>(
               &_SynServerLog_Game2Gate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SynServerLog_Game2Gate& a, SynServerLog_Game2Gate& b) {
    a.Swap(&b);
  }
  inline void Swap(SynServerLog_Game2Gate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SynServerLog_Game2Gate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SynServerLog_Game2Gate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SynServerLog_Game2Gate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SynServerLog_Game2Gate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SynServerLog_Game2Gate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SynServerLog_Game2Gate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Account.SynServerLog_Game2Gate";
  }
  protected:
  explicit SynServerLog_Game2Gate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSLogFieldNumber = 3,
    kUidFieldNumber = 1,
    kUParamFieldNumber = 2,
  };
  // bytes sLog = 3;
  void clear_slog();
  const std::string& slog() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_slog(ArgT0&& arg0, ArgT... args);
  std::string* mutable_slog();
  PROTOBUF_NODISCARD std::string* release_slog();
  void set_allocated_slog(std::string* slog);
  private:
  const std::string& _internal_slog() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slog(const std::string& value);
  std::string* _internal_mutable_slog();
  public:

  // uint64 uid = 1;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // uint64 uParam = 2;
  void clear_uparam();
  uint64_t uparam() const;
  void set_uparam(uint64_t value);
  private:
  uint64_t _internal_uparam() const;
  void _internal_set_uparam(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Account.SynServerLog_Game2Gate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slog_;
  uint64_t uid_;
  uint64_t uparam_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBAccount_2eproto;
};
// -------------------------------------------------------------------

class TestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Account.TestMessage) */ {
 public:
  inline TestMessage() : TestMessage(nullptr) {}
  ~TestMessage() override;
  explicit PROTOBUF_CONSTEXPR TestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMessage(const TestMessage& from);
  TestMessage(TestMessage&& from) noexcept
    : TestMessage() {
    *this = ::std::move(from);
  }

  inline TestMessage& operator=(const TestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMessage& operator=(TestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMessage* internal_default_instance() {
    return reinterpret_cast<const TestMessage*>(
               &_TestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestMessage& a, TestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Account.TestMessage";
  }
  protected:
  explicit TestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestidFieldNumber = 1,
  };
  // uint32 testid = 1;
  void clear_testid();
  uint32_t testid() const;
  void set_testid(uint32_t value);
  private:
  uint32_t _internal_testid() const;
  void _internal_set_testid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Account.TestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t testid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PBAccount_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SynServerLog_Game2Gate

// uint64 uid = 1;
inline void SynServerLog_Game2Gate::clear_uid() {
  uid_ = uint64_t{0u};
}
inline uint64_t SynServerLog_Game2Gate::_internal_uid() const {
  return uid_;
}
inline uint64_t SynServerLog_Game2Gate::uid() const {
  // @@protoc_insertion_point(field_get:Account.SynServerLog_Game2Gate.uid)
  return _internal_uid();
}
inline void SynServerLog_Game2Gate::_internal_set_uid(uint64_t value) {
  
  uid_ = value;
}
inline void SynServerLog_Game2Gate::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:Account.SynServerLog_Game2Gate.uid)
}

// uint64 uParam = 2;
inline void SynServerLog_Game2Gate::clear_uparam() {
  uparam_ = uint64_t{0u};
}
inline uint64_t SynServerLog_Game2Gate::_internal_uparam() const {
  return uparam_;
}
inline uint64_t SynServerLog_Game2Gate::uparam() const {
  // @@protoc_insertion_point(field_get:Account.SynServerLog_Game2Gate.uParam)
  return _internal_uparam();
}
inline void SynServerLog_Game2Gate::_internal_set_uparam(uint64_t value) {
  
  uparam_ = value;
}
inline void SynServerLog_Game2Gate::set_uparam(uint64_t value) {
  _internal_set_uparam(value);
  // @@protoc_insertion_point(field_set:Account.SynServerLog_Game2Gate.uParam)
}

// bytes sLog = 3;
inline void SynServerLog_Game2Gate::clear_slog() {
  slog_.ClearToEmpty();
}
inline const std::string& SynServerLog_Game2Gate::slog() const {
  // @@protoc_insertion_point(field_get:Account.SynServerLog_Game2Gate.sLog)
  return _internal_slog();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SynServerLog_Game2Gate::set_slog(ArgT0&& arg0, ArgT... args) {
 
 slog_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Account.SynServerLog_Game2Gate.sLog)
}
inline std::string* SynServerLog_Game2Gate::mutable_slog() {
  std::string* _s = _internal_mutable_slog();
  // @@protoc_insertion_point(field_mutable:Account.SynServerLog_Game2Gate.sLog)
  return _s;
}
inline const std::string& SynServerLog_Game2Gate::_internal_slog() const {
  return slog_.Get();
}
inline void SynServerLog_Game2Gate::_internal_set_slog(const std::string& value) {
  
  slog_.Set(value, GetArenaForAllocation());
}
inline std::string* SynServerLog_Game2Gate::_internal_mutable_slog() {
  
  return slog_.Mutable(GetArenaForAllocation());
}
inline std::string* SynServerLog_Game2Gate::release_slog() {
  // @@protoc_insertion_point(field_release:Account.SynServerLog_Game2Gate.sLog)
  return slog_.Release();
}
inline void SynServerLog_Game2Gate::set_allocated_slog(std::string* slog) {
  if (slog != nullptr) {
    
  } else {
    
  }
  slog_.SetAllocated(slog, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (slog_.IsDefault()) {
    slog_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Account.SynServerLog_Game2Gate.sLog)
}

// -------------------------------------------------------------------

// TestMessage

// uint32 testid = 1;
inline void TestMessage::clear_testid() {
  testid_ = 0u;
}
inline uint32_t TestMessage::_internal_testid() const {
  return testid_;
}
inline uint32_t TestMessage::testid() const {
  // @@protoc_insertion_point(field_get:Account.TestMessage.testid)
  return _internal_testid();
}
inline void TestMessage::_internal_set_testid(uint32_t value) {
  
  testid_ = value;
}
inline void TestMessage::set_testid(uint32_t value) {
  _internal_set_testid(value);
  // @@protoc_insertion_point(field_set:Account.TestMessage.testid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Account

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PBAccount_2eproto
